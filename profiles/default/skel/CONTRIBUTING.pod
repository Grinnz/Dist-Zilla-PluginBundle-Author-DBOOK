=head1 HOW TO CONTRIBUTE

Thank you for considering contributing to this distribution.  This file
contains instructions that will help you work with the source code.

The distribution is managed with L<Dist::Zilla>.  This means than many of the
usual files you might expect are not in the repository, but are generated at
release time.  Some generated files are kept in the repository as a convenience
(e.g. Makefile.PL or META.json).

Generally, B<you do not need Dist::Zilla to contribute patches>.  You may need
Dist::Zilla to create a tarball.  See below for guidance.

=head2 Getting dependencies

If you have App::cpanminus 1.6 or later installed, you can use L<cpanm> to
satisfy dependencies like this:

    $ cpanm --installdeps .

You can also run this command (or any other cpanm command) without installing
App::cpanminus first, using the fatpacked C<cpanm> script via curl or wget:

    $ curl -L https://cpanmin.us | perl - --installdeps .
    $ wget -qO - https://cpanmin.us | perl - --installdeps .

Otherwise, look for either a C<cpanfile> or C<META.json> file for a list of
dependencies to satisfy.

=head2 Running tests

You can run tests directly using the C<prove> tool:

    $ prove -l
    $ prove -lv t/some_test_file.t

For most of my distributions, C<prove> is entirely sufficient for you to test
any patches you have. I use C<prove> for 99% of my testing during development.

=head2 Code style and tidying

Please try to match any existing coding style.  If there is a C<.perltidyrc>
file, please install Perl::Tidy and use perltidy before submitting patches.

=head2 Installing and using Dist::Zilla

L<Dist::Zilla> is a very powerful authoring tool, optimized for maintaining a
large number of distributions with a high degree of automation, but it has a
large dependency chain, a bit of a learning curve and requires a number of
author-specific plugins.

To install it from CPAN, I recommend one of the following approaches for
the quickest installation:

    # using CPAN.pm, but bypassing non-functional pod tests
    $ cpan TAP::Harness::Restricted
    $ PERL_MM_USE_DEFAULT=1 HARNESS_CLASS=TAP::Harness::Restricted cpan Dist::Zilla

    # using cpanm, bypassing *all* tests
    $ cpanm -n Dist::Zilla

In either case, it's probably going to take about 10 minutes.  Go for a walk,
go get a cup of your favorite beverage, take a bathroom break, or whatever.
When you get back, Dist::Zilla should be ready for you.

Then you need to install any plugins specific to this distribution:

    $ cpanm --installdeps --with-develop .

Once installed, here are some dzil commands you might try:

    $ dzil build
    $ dzil test

You can learn more about Dist::Zilla at http://dzil.org/

=head2 Other notes

This distribution maintains the generated C<META.json> and either
C<Makefile.PL> or C<Build.PL> in the repository. This allows two things:
L<Travis CI|https://travis-ci.org/> can build and test the distribution without
requiring Dist::Zilla, and the distribution can be installed directly from
Github using C<cpanm> for testing (again, not requiring Dist::Zilla).

    $ cpanm git://github.com/Grinnz/Distribution-Name.git

Contributions will usually be expected in the form of a Github pull request.
See L<Using pull requests|https://help.github.com/articles/using-pull-requests/>
for further information. You can use the Github issue tracker to report issues
without an accompanying patch.

For more details on using my Dist::Zilla bundle, see the documentation at
L<Dist::Zilla::PluginBundle::Author::DBOOK>.

=head1 CREDITS

This file was adapted from an initial C<CONTRIBUTING.mkdn> file from David
Golden under the terms of the Apache 2 license, with inspiration from the
contributing documents from L<Dist::Zilla::Plugin::Author::KENTNL::CONTRIBUTING>
and L<Dist::Zilla::PluginBundle::Author::ETHER>.
